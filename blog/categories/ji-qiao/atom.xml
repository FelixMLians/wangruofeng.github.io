<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 技巧 | 王若风的小窝]]></title>
  <link href="http://wangruofeng.github.io/blog/categories/ji-qiao/atom.xml" rel="self"/>
  <link href="http://wangruofeng.github.io/"/>
  <updated>2016-01-13T04:52:43+08:00</updated>
  <id>http://wangruofeng.github.io/</id>
  <author>
    <name><![CDATA[Ace]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CocoaPods使用指南]]></title>
    <link href="http://wangruofeng.github.io/blog/2016/01/13/cocoapodsshi-yong-zhi-nan/"/>
    <updated>2016-01-13T04:51:14+08:00</updated>
    <id>http://wangruofeng.github.io/blog/2016/01/13/cocoapodsshi-yong-zhi-nan</id>
    <content type="html"><![CDATA[<h1>CocoaPods安装和使用</h1>

<p>CocoaPods是iOS最常用的第三方类库管理工具，绝大部分有名的开源类库
支持CocoaPods.
CocoaPods是用Ruby实现的，要使用它首先需要有Ruby的环境。幸亏是
OS X系统默认已经可以运行Ruby了，我么只需执行以下命令：</p>

<pre><code class="objective-c">sudo gem install cocoapods
</code></pre>

<p>由于某些原因，执行时会出现下面的错误提示：</p>

<pre><code class="objective-c">ERROR :Could not find a valid gem `cocoapods` (&gt;= 0), here is why:
        Unable to download data from https://rubygems.org/ - Errno::EPIPI:
        Broken pipe - SSL_connect
(https://rubygems.org/lastest_specs.4.8.gz)
</code></pre>

<p>安装成功后，接着执行命令：</p>

<pre><code class="objective-c">pod setup
</code></pre>

<p>如果Ruby环境不够新，可能需要更新以下：</p>

<pre><code class="objective-c">sudo gem update --system
</code></pre>

<p>至此安装就完成了，我们可以尝试搜索一个第三方类库：</p>

<pre><code class="objective-c">pod search AFNetworking
</code></pre>

<p>使用CocoaPods第一步，是在当前项目下，新疆一个Podfile文件：</p>

<pre><code class="objective-c">touch Podfile
</code></pre>

<p>然后利用vim打开Podfile文件编辑，加入你想要的类库，格式如下：</p>

<pre><code class="objective-c">platform :ios
pod  'Reachability', '3.1.0'

platform :ios, '6.0'
pod 'JSONKit', '1.4'
pod 'AFNetworking', '~&gt; 2.3,1'
</code></pre>

<p>如果是拷贝别人的项目，或是一个很久没打开过的项目，可能需要先执行一下：</p>

<pre><code class="objective-c">pod update
</code></pre>

<p>最后一步，执行命令：</p>

<pre><code class="objective-c">pod install
</code></pre>

<p>当终端出现类似下面的提示后，就代表成功了：</p>

<pre><code class="objective-c">[!] From now no use `Sample0814.xcworkspace`.
</code></pre>

<p>这个时候会看到项目文件夹多了一个xxx.xcworkspace,以后要通过这个文件
打开项目，老项目xxx.xcodeproj不再使用。</p>

<blockquote><ol>
<li>上面的每一步都可能出现问题，但大部分问题都是因为局域网的原因，用一个网速稳
定的境外VPN可破</li>
<li>如果上面因为权限问题安装失败，必须每次都要删除</li>
</ol>


<pre><code class="objective-c">rm -rf /User/loginname/Library/Caches/CocoaPods/
</code></pre>

<p>因为这个缓冲中会存下你的github的东西，造成每次调用上次权限问题的缓存。
3. 关于Podfile文件编辑时，第三方版本号的各种写法:</p></blockquote>

<pre><code class="objective-c">pod ‘AFNetworking’      //不显式指定依赖库版本，表示每次都获取最新版本
pod ‘AFNetworking’,  ‘2.0’     //只使用2.0版本
pod ‘AFNetworking’, ‘&gt;2.0′     //使用高于2.0的版本
pod ‘AFNetworking’, ‘&gt;=2.0′     //使用大于或等于2.0的版本
pod ‘AFNetworking’, ‘&lt;2.0′     //使用小于2.0的版本
pod ‘AFNetworking’, ‘&lt;=2.0′     //使用小于或等于2.0的版本
pod ‘AFNetworking’, ‘~&gt;0.1.2′     //使用大于等于0.1.2但小于0.2的版本，相当于&gt;=0.1.2并且&lt;0.2.0
pod ‘AFNetworking’, ‘~&gt;0.1′     //使用大于等于0.1但小于1.0的版本
pod ‘AFNetworking’, ‘~&gt;0′     //高于0的版本，写这个限制和什么都不写是一个效果，都表示使用最新版本
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS7 tintColor详解]]></title>
    <link href="http://wangruofeng.github.io/blog/2016/01/13/ios7-tintcolorxiang-jie/"/>
    <updated>2016-01-13T04:41:39+08:00</updated>
    <id>http://wangruofeng.github.io/blog/2016/01/13/ios7-tintcolorxiang-jie</id>
    <content type="html"><![CDATA[<h1>iOS7 tintColor 详解</h1>

<h3>为什么需要出现tintColor ？</h3>

<blockquote><p>解决以前不方便统一设置视图颜色风格的通点，方便自定义系统控件外观
 跟<code>UIAppearance</code>协议设计有点类似，<code>UIAppearance</code>是为了方便统一 设置一类控件的外观，而<code>tintColor</code>是为方便设置某个控件的外观，或者 说某个容器内所有控件的风格。</p>

<p>像在<code>UIViewController</code> 中，通过这段代码可以实现容器内，所有的子view风格统一化,这样在这个控制器中的所有子view都会以<code>tintColor</code>显示
<code>objective-c
self.view.tintAdjustmentMode = UIViewTintAdjustmentModeNormal
</code></p></blockquote>

<p><code>UIView</code>的<code>tintAdjustmentMode</code>需要说明一下，这是一个<code>UIViewTintAdjustmentMode</code>枚举，
* UIViewTintAdjustmentModeAutomatic（着色调整模式自动）
* UIViewTintAdjustmentModeNormal（着色调整模式正常）
* UIViewTintAdjustmentModeDimmed（着色调整模式变暗，打开控风格会变成灰白模式）</p>

<h3>先看看官方API说明</h3>

<p><img src="http://ww3.sinaimg.cn/mw690/64124373gw1eyvl7cyzvxj20du0kpn43.jpg" alt="tintColor官方说明" /></p>

<blockquote><p>iOS7以后所有的UIView以及它的子类都新增了一个叫tintColor的接口，方便我们对视图进行颜色调整</p></blockquote>

<h3>注意事项</h3>

<blockquote><p><code>UIImageView</code>需要设置<code>renderingMode</code>为<code>UIImageRenderingModeAlwaysTemplate</code>才能生效。
<code>renderingMode</code>是一个类型为<code>UIImageRenderingMode</code>的枚举
* UIImageRenderingModeAutomatic （默认渲染模式，自动模式）
* UIImageRenderingModeAlwaysOriginal（总是绘制原来的图片，不把它当成临时图片来处理）
* UIImageRenderingModeAlwaysTemplate （总是绘制临时图片，会忽略它原本的颜色信息，也就是根据<code>tintColor</code>生产图片）</p></blockquote>

<h3>UIImageView的使用</h3>

<pre><code class="objective-c">UIImage *image = [UIImage imageNamed:@"xxx.png"];
image = [image imageWithRenderingMode:UIImageRenderingModeAlwaysTemplate];
</code></pre>

<h3>- (void)tintColorDidChange的使用</h3>

<p>在子类中重写<code>- (void)tintColorDidChange</code> 方法，就可以实现每次更新<code>tintColor</code>的时候调用相关配置
<code>objective-c
 - (void)tintColorDidChange
 {
    _tintColorLabel.textColor = self.tintColor;
    _tintColorBlock.backgroundColor = self.tintColor;
 }
</code></p>

<h3>参考链接 <a href="https://www.shinobicontrols.com/blog/ios7-day-by-day-day-6-tint-color">Demo - iOS7 tintColor day by day</a></h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[优雅处理UIImage图片旋转]]></title>
    <link href="http://wangruofeng.github.io/blog/2016/01/13/you-ya-chu-li-uiimagetu-pian-xuan-zhuan/"/>
    <updated>2016-01-13T04:38:49+08:00</updated>
    <id>http://wangruofeng.github.io/blog/2016/01/13/you-ya-chu-li-uiimagetu-pian-xuan-zhuan</id>
    <content type="html"><![CDATA[<h2>UIImag构造方式</h2>

<p>UIImag构造方式大致有4种方式
* 从本地bundle中加载 <code>imageNamed:</code>，传入一个bundle的文件名即可
* 从本地一个文件路径读取 <code>imageWithContentsOfFile:</code>，需要传一个文件的文件路径path
* 通过二进制数据<code>NSData</code>来创建<code>imageWithData:</code>
* 通过一个<code>CoreGraphics</code>的<code>CGImageRef</code>来创建，<code>initWithCGImage:</code>
* 通过一个<code>CoreImage</code>的<code>CIImage</code>来创建<code>initWithCIImage</code></p>

<p>通过查阅Apple官网文档我们发现有2个这样的方法，今天就来一探究竟</p>

<pre><code class="objective-c">+ (UIImage *)imageWithCGImage:(CGImageRef)cgImage scale:(CGFloat)scale orientation:(UIImageOrientation)orientation NS_AVAILABLE_IOS(4_0);
+ (UIImage *)imageWithCIImage:(CIImage *)ciImage scale:(CGFloat)scale orientation:(UIImageOrientation)orientation NS_AVAILABLE_IOS(6_0);

- (instancetype)initWithCGImage:(CGImageRef)cgImage scale:(CGFloat)scale orientation:(UIImageOrientation)orientation NS_AVAILABLE_IOS(4_0);
- (instancetype)initWithCIImage:(CIImage *)ciImage scale:(CGFloat)scale orientation:(UIImageOrientation)orientation NS_AVAILABLE_IOS(6_0);
</code></pre>

<p>2个类方法2个实例方法都是类似，这里以<code>CGImageRef</code>为例</p>

<pre><code class="objective-c">+ (UIImage *)imageWithCGImage:(CGImageRef)cgImage scale:(CGFloat)scale orientation:(UIImageOrientation)orientation NS_AVAILABLE_IOS(4_0);
</code></pre>

<ol>
<li>新建的Xcode工程选择single Application</li>
<li>在storyboard中拖一个<code>UIImageView</code>设置它水平垂直居中对齐，宽带高度随便设一个值不要太大就行，设置<code>UIImageView</code>的<code>contentMode</code>为<code>Aspect Fit</code>方便查看以免变形</li>
<li>在<code>UIImageView</code>下发放一个<code>UIButton</code>控件方便后面好对图片进行旋转操作</li>
<li><p>在viewController中建立一个<code>UIImageView</code>引用,拉出一个rotate按钮的<code>IBAction</code></p>

<p> 现在大概界面大概这样
 <img src="http://ww3.sinaimg.cn/mw690/64124373gw1ezhnagzyhpj20x7105doj.jpg" alt="UIImageOrientation效果图" /></p></li>
<li><p>下面我们实现
<code>- (IBAction)rotateImage:(id)sender {}</code>这个方法</p>

<blockquote><p>在这里我们想通过点击按钮实现图片旋转
  为了方便使用我们使用Category的方式实现
  新建一个UIImage的分类取名叫Rotate</p>

<p>这里需要传一张要处理的图片和一个待处理成的图片方向</p>

<pre><code class="``objective-c">  + (UIImage *)rotateImage:(UIImage *)oldImage
           orientation:(UIImageOrientation)orientation;
</code></pre></blockquote>

<pre><code class="``objective-c">  + (UIImage *)rotateImage:(UIImage *)oldImage orientation:(UIImageOrientation)orientation{

  UIImage *newImage = [UIImage imageWithCGImage:oldImage.CGImage scale:1 orientation:orientation];

  NSString *orientationStr = nil;
  switch (orientation) {
      case UIImageOrientationUp: {
          orientationStr = @"UIImageOrientationUp";
          break;
      }
      case UIImageOrientationDown: {
          orientationStr = @"UIImageOrientationDown";
          break;
      }
      case UIImageOrientationLeft: {
          orientationStr = @"UIImageOrientationLeft";
          break;
      }
      case UIImageOrientationRight: {
          orientationStr = @"UIImageOrientationRight";
          break;
      }
      case UIImageOrientationUpMirrored: {
          orientationStr = @"UIImageOrientationUpMirrored";
          break;
      }
      case UIImageOrientationDownMirrored: {
          orientationStr = @"UIImageOrientationDownMirrored";
          break;
      }
      case UIImageOrientationLeftMirrored: {
          orientationStr = @"UIImageOrientationLeftMirrored";
          break;
      }
      case UIImageOrientationRightMirrored: {
          orientationStr = @"UIImageOrientationRightMirrored";
          break;
      }

  }

  NSLog(@"current orientation: %@",orientationStr);

  return newImage;
}
</code></pre></li>
</ol>


<p>在button点击事件触发时的这样使用</p>

<pre><code class="objective-c">- (IBAction)rotateImage:(id)sender {

    UIImage *oldImage = self.imgView.image;

    UIImage *rotatedImage = [UIImage rotateImage:oldImage orientation:UIImageOrientationLeft];

    self.imgView.image = rotatedImage;
}
</code></pre>

<p>点击按钮测试发现第一次没问题，但是重逢点击无效
原来<code>+ (UIImage *)imageWithCGImage:(CGImageRef)cgImage scale:(CGFloat)scale orientation:(UIImageOrientation)orientation</code>方法执行原理是执行前通过
<code>@property(nonatomic,readonly) UIImageOrientation imageOrientation;</code>接口先判断当前图片的方向是否为将要旋转的方向，
如果是就直接返回不做处理，如果不是再作旋转处理，
也就是说这个方法并没有实际上旋转image的数据，只是用一个枚举标记旋转的状态</p>

<p>如果我们想每次旋转需要直接改变原始image的数据该怎么办呢？
在这里我们通过<code>CGBitmapContext</code>,使用<code>CGContextRotateCTM</code>来设置旋转，
再把UIImage通过<code>drawInRect
</code>重新绘制出来，通过<code>UIGraphicsGetImageFromCurrentImageContext</code>获得处理后的图片
下面是具体实现</p>

<pre><code class="objective-c">- (UIImage *)fixedRotation{
    if (self.imageOrientation == UIImageOrientationUp) return self;
    CGAffineTransform transform = CGAffineTransformIdentity;

    switch (self.imageOrientation) {
        case UIImageOrientationDown:
        case UIImageOrientationDownMirrored:
            transform = CGAffineTransformTranslate(transform, self.size.width, self.size.height);
            transform = CGAffineTransformRotate(transform, M_PI);
            break;

        case UIImageOrientationLeft:
        case UIImageOrientationLeftMirrored:
            transform = CGAffineTransformTranslate(transform, self.size.width, 0);
            transform = CGAffineTransformRotate(transform, M_PI_2);
            break;

        case UIImageOrientationRight:
        case UIImageOrientationRightMirrored:
            transform = CGAffineTransformTranslate(transform, 0, self.size.height);
            transform = CGAffineTransformRotate(transform, -M_PI_2);
            break;
        case UIImageOrientationUp:
        case UIImageOrientationUpMirrored:
            break;
    }

    switch (self.imageOrientation) {
        case UIImageOrientationUpMirrored:
        case UIImageOrientationDownMirrored:
            transform = CGAffineTransformTranslate(transform, self.size.width, 0);
            transform = CGAffineTransformScale(transform, -1, 1);
            break;

        case UIImageOrientationLeftMirrored:
        case UIImageOrientationRightMirrored:
            transform = CGAffineTransformTranslate(transform, self.size.height, 0);
            transform = CGAffineTransformScale(transform, -1, 1);
            break;
        case UIImageOrientationUp:
        case UIImageOrientationDown:
        case UIImageOrientationLeft:
        case UIImageOrientationRight:
            break;
    }

    // Now we draw the underlying CGImage into a new context, applying the transform
    // calculated above.
    CGContextRef ctx = CGBitmapContextCreate(NULL, self.size.width, self.size.height,
                                             CGImageGetBitsPerComponent(self.CGImage), 0,
                                             CGImageGetColorSpace(self.CGImage),
                                             CGImageGetBitmapInfo(self.CGImage));
    CGContextConcatCTM(ctx, transform);
    switch (self.imageOrientation) {
        case UIImageOrientationLeft:
        case UIImageOrientationLeftMirrored:
        case UIImageOrientationRight:
        case UIImageOrientationRightMirrored:
            // Grr...
            CGContextDrawImage(ctx, CGRectMake(0,0,self.size.height,self.size.width), self.CGImage);
            break;

        default:
            CGContextDrawImage(ctx, CGRectMake(0,0,self.size.width,self.size.height), self.CGImage);
            break;
    }

    // And now we just create a new UIImage from the drawing context
    CGImageRef cgimg = CGBitmapContextCreateImage(ctx);
    UIImage *img = [UIImage imageWithCGImage:cgimg];
    CGContextRelease(ctx);
    CGImageRelease(cgimg);
    return img;

}
</code></pre>

<p>现在再优化一下原来<code>+ (UIImage *)rotateImage:(UIImage *)oldImage orientation:(UIImageOrientation)orientation</code> 方法,修改成这样
```objective-c
+ (UIImage <em>)rotateImage:(UIImage </em>)oldImage orientation:(UIImageOrientation)orientation{</p>

<pre><code>UIImage *newImage = [UIImage imageWithCGImage:oldImage.CGImage scale:1 orientation:orientation];

//fix original Image with gived orientation.
UIImage *fixedRotationImage = [newImage fixedRotation];

NSString *orientationStr = nil;
switch (orientation) {
    case UIImageOrientationUp: {
        orientationStr = @"UIImageOrientationUp";
        break;
    }
    case UIImageOrientationDown: {
        orientationStr = @"UIImageOrientationDown";
        break;
    }
    case UIImageOrientationLeft: {
        orientationStr = @"UIImageOrientationLeft";
        break;
    }
    case UIImageOrientationRight: {
        orientationStr = @"UIImageOrientationRight";
        break;
    }
    case UIImageOrientationUpMirrored: {
        orientationStr = @"UIImageOrientationUpMirrored";
        break;
    }
    case UIImageOrientationDownMirrored: {
        orientationStr = @"UIImageOrientationDownMirrored";
        break;
    }
    case UIImageOrientationLeftMirrored: {
        orientationStr = @"UIImageOrientationLeftMirrored";
        break;
    }
    case UIImageOrientationRightMirrored: {
        orientationStr = @"UIImageOrientationRightMirrored";
        break;
    }

}

NSLog(@"current orientation: %@",orientationStr);

return fixedRotationImage;
</code></pre>

<p>}
```
 现在再测试一下，well，It‘s OK。</p>

<p> have fun!!!</p>

<p>参考资料：
* <a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIImage_Class/#//apple_ref/c/tdef/UIImageOrientation">Apple-UIImage Class Reference</a>
* <a href="http://stackoverflow.com/questions/8915630/ios-uiimageview-how-to-handle-uiimage-image-orientation">ios-uiimageview-how-to-handle-uiimage-image-orientation</a>
* <a href="http://www.galloway.me.uk/2012/01/uiimageorientation-exif-orientation-sample-images/">UIImageOrientation / EXIF orientation sample images</a></p>
]]></content>
  </entry>
  
</feed>
