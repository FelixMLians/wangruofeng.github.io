<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 数据库 | 王若风的技术博客]]></title>
  <link href="http://wangruofeng.github.io/blog/categories/shu-ju-ku/atom.xml" rel="self"/>
  <link href="http://wangruofeng.github.io/"/>
  <updated>2016-01-13T23:23:24+08:00</updated>
  <id>http://wangruofeng.github.io/</id>
  <author>
    <name><![CDATA[王若风]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sqlite_教程(三)]]></title>
    <link href="http://wangruofeng.github.io/blog/2016/01/13/sqlite-jiao-cheng-san/"/>
    <updated>2016-01-13T23:22:37+08:00</updated>
    <id>http://wangruofeng.github.io/blog/2016/01/13/sqlite-jiao-cheng-san</id>
    <content type="html"><![CDATA[<h4>SQLite Insert 语句</h4>

<p>SQLite 的 INSERT INTO 语句用于向数据库的某个表中添加新的数据行。</p>

<hr />

<p><strong>语法</strong></p>

<p>INSERT INTO 语句有两种基本语法，如下所示：</p>

<pre><code>INSERT INTO TABLE_NAME (column1, column2, column3,...columnN)]  
VALUES (value1, value2, value3,...valueN);
</code></pre>

<p>在这里，column1, column2,&hellip;columnN 是要插入数据的表中的列的名称。
如果要为表中的所有列添加值，您也可以不需要在 SQLite 查询中指定列名称。但要确保值的顺序与列在表中的顺序一致。SQLite 的 INSERT INTO 语法如下：</p>

<pre><code>INSERT INTO TABLE_NAME VALUES (value1,value2,value3,...valueN);
</code></pre>

<hr />

<p><strong>实例</strong></p>

<p>假设您已经在 testDB.db 中创建了 COMPANY表，如下所示：</p>

<pre><code>sqlite&gt; CREATE TABLE COMPANY(
   ID INT PRIMARY KEY     NOT NULL,
   NAME           TEXT    NOT NULL,
   AGE            INT     NOT NULL,
   ADDRESS        CHAR(50),
   SALARY         REAL
);
</code></pre>

<p>现在，下面的语句将在 COMPANY 表中创建六个记录：</p>

<pre><code>INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY)
VALUES (1, 'Paul', 32, 'California', 20000.00 );

INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY)
VALUES (2, 'Allen', 25, 'Texas', 15000.00 );

INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY)
VALUES (3, 'Teddy', 23, 'Norway', 20000.00 );

INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY)
VALUES (4, 'Mark', 25, 'Rich-Mond ', 65000.00 );

INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY)
VALUES (5, 'David', 27, 'Texas', 85000.00 );

INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY)
VALUES (6, 'Kim', 22, 'South-Hall', 45000.00 );
</code></pre>

<p>您也可以使用第二种语法在 COMPANY 表中创建一个记录，如下所示：</p>

<pre><code>INSERT INTO COMPANY VALUES (7, 'James', 24, 'Houston', 10000.00 );
</code></pre>

<p>上面的所有语句将在 COMPANY 表中创建下列记录。下一章会教您如何从一个表中显示所有这些记录。</p>

<pre><code>ID          NAME        AGE         ADDRESS     SALARY
----------  ----------  ----------  ----------  ----------
1           Paul        32          California  20000.0
2           Allen       25          Texas       15000.0
3           Teddy       23          Norway      20000.0
4           Mark        25          Rich-Mond   65000.0
5           David       27          Texas       85000.0
6           Kim         22          South-Hall  45000.0
7           James       24          Houston     10000.0
</code></pre>

<h4>使用一个表来填充另一个表</h4>

<p>您可以通过在一个有一组字段的表上使用 select 语句，填充数据到另一个表中。下面是语法：</p>

<pre><code>INSERT INTO first_table_name [(column1, column2, ... columnN)] 
   SELECT column1, column2, ...columnN 
   FROM second_table_name
   [WHERE condition];
</code></pre>

<h4>SQLite Select 语句</h4>

<p>SQLite 的 SELECT 语句用于从 SQLite 数据库表中获取数据，以结果表的形式返回数据。这些结果表也被称为结果集。</p>

<hr />

<p><strong>语法</strong></p>

<p>SQLite 的 SELECT 语句的基本语法如下：</p>

<pre><code>SELECT column1, column2, columnN FROM table_name;
</code></pre>

<p>在这里，column1, column2&hellip;是表的字段，他们的值即是您要获取的。如果您想获取所有可用的字段，那么可以使用下面的语法：</p>

<pre><code>SELECT * FROM table_name;
</code></pre>

<hr />

<p><strong>实例</strong></p>

<p>假设 COMPANY 表有以下记录：</p>

<pre><code>ID          NAME        AGE         ADDRESS     SALARY
----------  ----------  ----------  ----------  ----------
1           Paul        32          California  20000.0
2           Allen       25          Texas       15000.0
3           Teddy       23          Norway      20000.0
4           Mark        25          Rich-Mond   65000.0
5           David       27          Texas       85000.0
6           Kim         22          South-Hall  45000.0
7           James       24          Houston     10000.0
</code></pre>

<p>下面是一个实例，使用 SELECT 语句获取并显示所有这些记录。在这里，前三个命令被用来设置正确格式化的输出。</p>

<pre><code>sqlite&gt;.header on
sqlite&gt;.mode column
sqlite&gt; SELECT * FROM COMPANY;
</code></pre>

<p>最后，将得到以下的结果：</p>

<pre><code>ID          NAME        AGE         ADDRESS     SALARY
----------  ----------  ----------  ----------  ----------
1           Paul        32          California  20000.0
2           Allen       25          Texas       15000.0
3           Teddy       23          Norway      20000.0
4           Mark        25          Rich-Mond   65000.0
5           David       27          Texas       85000.0
6           Kim         22          South-Hall  45000.0
7           James       24          Houston     10000.0
</code></pre>

<p>如果只想获取 COMPANY 表中指定的字段，则使用下面的查询：</p>

<pre><code>sqlite&gt; SELECT ID, NAME, SALARY FROM COMPANY;
</code></pre>

<p>上面的查询会产生以下结果：</p>

<pre><code>ID          NAME        SALARY
----------  ----------  ----------
1           Paul        20000.0
2           Allen       15000.0
3           Teddy       20000.0
4           Mark        65000.0
5           David       85000.0
6           Kim         45000.0
7           James       10000.0
</code></pre>

<hr />

<p><strong>设置输出列的宽度</strong></p>

<p>有时，由于要显示的列的默认宽度导致 .mode column，这种情况下，输出被截断。此时，您可以使用 .width num, num&hellip;. 命令设置显示列的宽度，如下所示：</p>

<pre><code>sqlite&gt;.width 10, 20, 10
sqlite&gt;SELECT * FROM COMPANY;
</code></pre>

<p>上面的 .width 命令设置第一列的宽度为 10，第二列的宽度为 20，第三列的宽度为 10。因此上述 SELECT 语句将得到以下结果：</p>

<pre><code>ID          NAME                  AGE         ADDRESS     SALARY
----------  --------------------  ----------  ----------  ----------
1           Paul                  32          California  20000.0
2           Allen                 25          Texas       15000.0
3           Teddy                 23          Norway      20000.0
4           Mark                  25          Rich-Mond   65000.0
5           David                 27          Texas       85000.0
6           Kim                   22          South-Hall  45000.0
7           James                 24          Houston     10000.0
</code></pre>

<p><strong>Schema 信息</strong>
因为所有的点命令只在 SQLite 提示符中可用，所以当您进行带有 SQLite 的编程时，您要使用下面的带有 sqlite_master 表的 SELECT 语句来列出所有在数据库中创建的表：</p>

<pre><code>sqlite&gt; SELECT tbl_name FROM sqlite_master WHERE type = 'table';
</code></pre>

<p>假设在 testDB.db 中已经存在唯一的 COMPANY 表，则将产生以下结果：</p>

<pre><code>tbl_name
----------
COMPANY
</code></pre>

<p>您可以列出关于 COMPANY 表的完整信息，如下所示：</p>

<pre><code>sqlite&gt; SELECT sql FROM sqlite_master WHERE type = 'table' AND tbl_name = 'COMPANY';
</code></pre>

<p>假设在 testDB.db 中已经存在唯一的 COMPANY 表，则将产生以下结果：</p>

<pre><code>CREATE TABLE COMPANY(
   ID INT PRIMARY KEY     NOT NULL,
   NAME           TEXT    NOT NULL,
   AGE            INT     NOT NULL,
   ADDRESS        CHAR(50),
   SALARY         REAL
)
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sqlite_教程(二)]]></title>
    <link href="http://wangruofeng.github.io/blog/2016/01/13/sqlite-jiao-cheng-er/"/>
    <updated>2016-01-13T23:21:34+08:00</updated>
    <id>http://wangruofeng.github.io/blog/2016/01/13/sqlite-jiao-cheng-er</id>
    <content type="html"><![CDATA[<h4>SQLite 数据类型</h4>

<p>SQLite 数据类型是一个用来指定任何对象的数据类型的属性。SQLite 中的每一列，每个变量和表达式都有相关的数据类型。</p>

<p>您可以在创建表的同时使用这些数据类型。SQLite 使用一个更普遍的动态类型系统。在 SQLite 中，值的数据类型与值本身是相关的，而不是与它的容器相关。</p>

<h4>SQLite 存储类</h4>

<p>每个存储在 SQLite 数据库中的值都具有以下存储类之一：</p>

<table>
<thead>
<tr>
<th>存储类  </th>
<th>描述                      </th>
</tr>
</thead>
<tbody>
<tr>
<td>NULL   </td>
<td>值是一个 NULL 值。        </td>
</tr>
<tr>
<td>INTEGER</td>
<td>   值是一个带符号的整数，根据值的大小存储在 1、2、3、4、6 或 8 字节中。</td>
</tr>
<tr>
<td>REAL   </td>
<td>值是一个浮点值，存储为 8 字节的 IEEE 浮点数字。</td>
</tr>
<tr>
<td>TEXT   </td>
<td>值是一个文本字符串，使用数据库编码（UTF-8、UTF-16BE 或 |UTF-16LE）存储。</td>
</tr>
<tr>
<td>BLOB   </td>
<td>值是一个 blob 数据，完全根据它的输入存储。</td>
</tr>
</tbody>
</table>


<p>SQLite 的存储类稍微比数据类型更普遍。INTEGER 存储类，例如，包含 6 种不同的不同长度的整数数据类型。</p>

<hr />

<h4>SQLite Affinity 类型</h4>

<p>SQLite 支持列上的类型 affinity 概念。任何列仍然可以存储任何类型的数据，但列的首选存储类是它的 <strong>affinity</strong>。在 SQLite3 数据库中，每个表的列分配为以下类型的 affinity 之一：</p>

<table>
<thead>
<tr>
<th>Affinity </th>
<th>描述                    </th>
</tr>
</thead>
<tbody>
<tr>
<td>TEXT     </td>
<td>该列使用存储类 NULL、TEXT 或 BLOB 存储所有数据。</td>
</tr>
<tr>
<td>NUMERIC  </td>
<td>该列可以包含使用所有五个存储类的值。</td>
</tr>
<tr>
<td>INTEGER  </td>
<td>与带有 NUMERIC affinity 的列相同，在 CAST 表达式中带有异常。</td>
</tr>
<tr>
<td>REAL     </td>
<td>与带有 NUMERIC affinity 的列相似，不同的是，它会强制把整数值转换为浮点表示。</td>
</tr>
<tr>
<td>NONE     </td>
<td>带有 affinity NONE 的列，不会优先使用哪个存储类，也不会尝试把数据从一个存储类强制转换为另一个存储类。</td>
</tr>
</tbody>
</table>


<h4>SQLite Affinity 及类型名称</h4>

<p>下表列出了当创建 SQLite3 表时可使用的各种数据类型名称，同时也显示了相应的应用 Affinity：</p>

<table>
<thead>
<tr>
<th>数据类型  </th>
<th>Affinity                     </th>
</tr>
</thead>
<tbody>
<tr>
<td>INT <br> INTEGERTINYINT <br> SMALLINT <br> MEDIUMINT <br> BIGINT <br> UNSIGNED BIG INT <br> INT2 <br> INT8  <br> </td>
<td> INTEGER  </td>
</tr>
<tr>
<td>CHARACTER(20) <br> VARCHAR(255) <br> VARYING CHARACTER(255) <br> NCHAR(55) <br> NATIVE CHARACTER(70) <br> NVARCHAR(100) <br> TEXT <br> CLOB                                              </td>
<td> TEXT    </td>
</tr>
<tr>
<td>BLOB <br> no datatype specified                 </td>
<td> NONE    </td>
</tr>
<tr>
<td>REAL <br> DOUBLE <br> DOUBLE PRECISION <br> FLOAT </td>
<td> REAL  </td>
</tr>
<tr>
<td>NUMERIC <br> DECIMAL(10,5) <br> BOOLEAN <br> DATE <br> DATETIME </td>
<td> NUMERIC </td>
</tr>
</tbody>
</table>


<hr />

<h4>Boolean 数据类型</h4>

<p>SQLite 没有单独的 Boolean 存储类。相反，布尔值被存储为整数 0（false）和 1（true）。</p>

<hr />

<h4>Date 与 Time 数据类型</h4>

<p>SQLite 没有一个单独的用于存储日期和/或时间的存储类，但 SQLite 能够把日期和时间存储为 TEXT、REAL 或 INTEGER 值。</p>

<table>
<thead>
<tr>
<th>存储类    </th>
<th>日期格式                      </th>
</tr>
</thead>
<tbody>
<tr>
<td>TEXT     </td>
<td>格式为 &ldquo;YYYY-MM-DD HH:MM:SS.SSS&rdquo; 的日期。</td>
</tr>
<tr>
<td>REAL     </td>
<td>从公元前 4714 年 11 月 24 日格林尼治时间的正午开始算起的天数。</td>
</tr>
<tr>
<td>INTEGER  </td>
<td> 从 1970-01-01 00:00:00 UTC 算起的秒数。</td>
</tr>
</tbody>
</table>


<p>您可以以任何上述格式来存储日期和时间，并且可以使用内置的日期和时间函数来自由转换不同格式。</p>

<h4>SQLite 创建数据库</h4>

<p>SQLite 的 sqlite3 命令被用来创建新的 SQLite 数据库。您不需要任何特殊的权限即可创建一个数据。</p>

<hr />

<p><strong>语法</strong></p>

<p>sqlite3 命令的基本语法如下：</p>

<pre><code>$sqlite3 DatabaseName.db
</code></pre>

<p>通常情况下，数据库名称在 RDBMS 内应该是唯一的。</p>

<p><strong>实例</strong></p>

<p>如果您想创建一个新的数据库 &lt;testDB.db>，SQLITE3 语句如下所示：</p>

<pre><code>$sqlite3 testDB.db
SQLite version 3.8.10.2 2015-05-20 18:17:19
Enter ".help" for usage hints.
sqlite&gt; 
</code></pre>

<p>上面的命令将在当前目录下创建一个文件 testDB.db。该文件将被 SQLite 引擎用作数据库。如果您已经注意到 sqlite3 命令在成功创建数据库文件之后，将提供一个 sqlite> 提示符。
一旦数据库被创建，您就可以使用 SQLite 的 .databases 命令来检查它是否在数据库列表中，如下所示：</p>

<pre><code>sqlite&gt;.databases
seq  name             file                                                      
---- ---------------- --------------------------------------------
0    main             /Users/wangruofeng/Documents/SQLitePractice/testDB.db 
</code></pre>

<p>您可以使用 SQLite .quit 命令退出 sqlite 提示符，如下所示：</p>

<pre><code>sqlite&gt;.quit
$
</code></pre>

<h4>.dump 命令</h4>

<p>您可以在命令提示符中使用 SQLite .dump 点命令来导出完整的数据库在一个文本文件中，如下所示：</p>

<pre><code>$sqlite3 testDB.db .dump &gt; testDB.sql
</code></pre>

<p>上面的命令将转换整个 testDB.db 数据库的内容到 SQLite 的语句中，并将其转储到 ASCII 文本文件 testDB.sql 中。您可以通过简单的方式从生成的 testDB.sql 恢复，如下所示：</p>

<pre><code>$sqlite3 testDB.db &lt; testDB.sql
</code></pre>

<p>此时的数据库是空的，一旦数据库中有表和数据，您可以尝试上述两个程序。现在，让我们继续学习下一章。</p>

<h4>SQLite 附加数据库</h4>

<p>假设这样一种情况，当在同一时间有多个数据库可用，您想使用其中的任何一个。SQLite 的 ATTACH DTABASE 语句是用来选择一个特定的数据库，使用该命令后，所有的 SQLite 语句将在附加的数据库下执行。相当于给数据库取一个别名</p>

<hr />

<p><strong>语法</strong></p>

<p>SQLite 的 ATTACH DATABASE 语句的基本语法如下：</p>

<pre><code>ATTACH DATABASE 'DatabaseName' As 'Alias-Name';
</code></pre>

<p>如果数据库尚未被创建，上面的命令将创建一个数据库，如果数据库已存在，则把数据库文件名称与逻辑数据库 &lsquo;Alias-Name&rsquo; 绑定在一起。</p>

<hr />

<p><strong>实例</strong>
如果想附加一个现有的数据库 testDB.db，则 ATTACH DATABASE 语句将如下所示：</p>

<pre><code>sqlite&gt; ATTACH DATABASE 'testDB.db' as 'TEST';
</code></pre>

<p>使用 SQLite .database 命令来显示附加的数据库。</p>

<pre><code>sqlite&gt; .database
seq  name             file
---  ---------------  ----------------------
0    main             /home/sqlite/testDB.db
2    test             /home/sqlite/testDB.db
</code></pre>

<p>数据库名称 main 和 temp 被保留用于主数据库和存储临时表及其他临时数据对象的数据库。这两个数据库名称可用于每个数据库连接，且不应该被用于附加，否则将得到一个警告消息，如下所示：</p>

<pre><code>sqlite&gt;  ATTACH DATABASE 'testDB.db' as 'TEMP';
Error: database TEMP is already in use
sqlite&gt;  ATTACH DATABASE 'testDB.db' as 'main';
Error: database main is already in use
</code></pre>

<hr />

<h4>SQLite 分离数据库</h4>

<p>SQLite的 <strong>DETACH DTABASE</strong> 语句是用来把命名数据库从一个数据库连接分离和游离出来，连接是之前使用 ATTACH 语句附加的。如果同一个数据库文件已经被附加上多个别名，DETACH 命令将只断开给定名称的连接，而其余的仍然有效。您无法分离 main 或 temp 数据库。</p>

<blockquote><p>如果数据库是在内存中或者是临时数据库，则该数据库将被摧毁，且内容将会丢失。</p></blockquote>

<p><strong>语法</strong></p>

<p>SQLite 的 DETACH DATABASE &lsquo;Alias-Name&rsquo; 语句的基本语法如下：</p>

<pre><code>DETACH DATABASE 'Alias-Name';
</code></pre>

<p>在这里，'Alias-Name' 与您之前使用 ATTACH 语句附加数据库时所用到的别名相同。</p>

<p><strong>实例</strong></p>

<p>假设在前面的章节中您已经创建了一个数据库，并给它附加了 &lsquo;test&rsquo; 和 &lsquo;currentDB'，使用 .database/.databases 命令，我们可以看到：</p>

<pre><code>sqlite&gt; .databases
seq  name             file
---  ---------------  ----------------------
0    main             /home/sqlite/testDB.db
2    test             /home/sqlite/testDB.db
3    currentDB        /home/sqlite/testDB.db
</code></pre>

<p>现在，让我们尝试把 &lsquo;currentDB&rsquo; 从 testDB.db 中分离出来，如下所示：</p>

<pre><code>sqlite&gt; DETACH DATABASE 'currentDB';
</code></pre>

<p>现在，如果检查当前附加的数据库，您会发现，testDB.db 仍与 &lsquo;test&rsquo; 和 &lsquo;main&rsquo; 保持连接。</p>

<pre><code>sqlite&gt; .databases
seq  name             file
---  ---------------  ----------------------
0    main             /home/sqlite/testDB.db
2    test             /home/sqlite/testDB.db
</code></pre>

<hr />

<h4>SQLite 创建表</h4>

<p>SQLite 的 CREATE TABLE 语句用于在任何给定的数据库创建一个新表。创建基本表，涉及到命名表、定义列及每一列的数据类型。</p>

<hr />

<p><strong>语法</strong></p>

<p>CREATE TABLE 语句的基本语法如下：</p>

<pre><code>CREATE TABLE database_name.table_name(
   column1 datatype  PRIMARY KEY(one or more columns),
   column2 datatype,
   column3 datatype,
   .....
   columnN datatype,
);
</code></pre>

<p>CREATE TABLE 是告诉数据库系统创建一个新表的关键字。CREATE TABLE 语句后跟着表的唯一的名称或标识。您也可以选择指定带有 table_name 的 <em>database_name</em>。</p>

<p><strong>实例</strong></p>

<p>下面是一个实例，它创建了一个 COMPANY 表，ID 作为主键，NOT NULL 的约束表示在表中创建纪录时这些字段不能为 NULL：</p>

<pre><code>sqlite&gt; CREATE TABLE COMPANY(
   ID INT PRIMARY KEY     NOT NULL,
   NAME           TEXT    NOT NULL,
   AGE            INT     NOT NULL,
   ADDRESS        CHAR(50),
   SALARY         REAL
);
</code></pre>

<p>让我们再创建一个表，我们将在随后章节的练习中使用：</p>

<pre><code>sqlite&gt; CREATE TABLE DEPARTMENT(    
   ID INT PRIMARY KEY      NOT NULL,
   DEPT           CHAR(50) NOT NULL,
   EMP_ID         INT      NOT NULL
);
</code></pre>

<p>您可以使用 SQLIte 命令中的 .tables/.table 命令来验证表是否已成功创建，该命令用于列出附加数据库中的所有表。</p>

<pre><code>sqlite&gt; .tables
COMPANY          DEPARTMENT       TEST.COMPANY     TEST.DEPARTMENT
</code></pre>

<p>在这里，可以看到 COMPANY 表出现两次，一个是主数据库的 COMPANY 表，一个是为 testDB.db 创建的 &lsquo;test&rsquo; 别名的 test.COMPANY 表。您可以使用 SQLite .schema 命令得到表的完整信息，如下所示：</p>

<pre><code>sqlite&gt;.schema COMPANY
CREATE TABLE COMPANY(
   ID INT PRIMARY KEY     NOT NULL,
   NAME           TEXT    NOT NULL,
   AGE            INT     NOT NULL,
   ADDRESS        CHAR(50),
   SALARY         REAL
);
</code></pre>

<h4>SQLite 删除表</h4>

<p>SQLite 的 DROP TABLE 语句用来删除表定义及其所有相关数据、索引、触发器、约束和该表的权限规范。</p>

<blockquote><p>使用此命令时要特别注意，因为一旦一个表被删除，表中所有信息也将永远丢失。</p></blockquote>

<hr />

<p><strong>语法</strong></p>

<p>DROP TABLE 语句的基本语法如下。您可以选择指定带有表名的数据库名称，如下所示：</p>

<pre><code>DROP TABLE database_name.table_name;
</code></pre>

<p><strong>实例</strong></p>

<p>让我们先确认 COMPANY 表已经存在，然后我们将其从数据库中删除。</p>

<pre><code>sqlite&gt; .tables
COMPANY       test.COMPANY
</code></pre>

<p>这意味着 COMPANY 表已存在数据库中，接下来让我们把它从数据库中删除，如下：</p>

<pre><code>sqlite&gt; DROP TABLE COMPANY;
sqlite&gt;
</code></pre>

<p>现在，如果尝试 .TABLES 命令，那么将无法找到 COMPANY 表了：</p>

<pre><code>sqlite&gt; .tables
sqlite&gt;
</code></pre>

<p>显示结果为空，意味着已经成功从数据库删除表。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sqlite_教程(一)]]></title>
    <link href="http://wangruofeng.github.io/blog/2016/01/13/sqlite-jiao-cheng-%5B%3F%5D/"/>
    <updated>2016-01-13T23:18:15+08:00</updated>
    <id>http://wangruofeng.github.io/blog/2016/01/13/sqlite-jiao-cheng-[?]</id>
    <content type="html"><![CDATA[<h4>简介：</h4>

<p>SQLite 是一个软件库，实现了自给自足的、无服务器的、零配置的、事务性的 SQL 数据库引擎。SQLite 是在世界上最广泛部署的 SQL 数据库引擎。SQLite 源代码不受版权限制。
本教程将告诉您如何使用 SQLite 编程，并让你迅速上手。</p>

<h4>什么是 SQLite？</h4>

<p>SQLite是一个进程内的库，实现了自给自足的、无服务器的、零配置的、事务性的 SQL 数据库引擎。它是一个零配置的数据库，这意味着与其他数据库一样，您不需要在系统中配置。
就像其他数据库，SQLite 引擎不是一个独立的进程，可以按应用程序需求进行静态或动态连接。SQLite 直接访问其存储文件</p>

<h4>为什么要用 SQLite？</h4>

<ul>
<li>不需要一个单独的服务器进程或操作的系统（无服务器的）。</li>
<li>SQLite 不需要配置，这意味着不需要安装或管理。</li>
<li>一个完整的 SQLite 数据库是存储在一个单一的跨平台的磁盘文件。</li>
<li>SQLite 是非常小的，是轻量级的，完全配置时小于 400KiB，省略可选功能配置时小于250KiB。</li>
<li>SQLite 是自给自足的，这意味着不需要任何外部的依赖。</li>
<li>SQLite 事务是完全兼容 ACID 的，允许从多个进程或线程安全访问。</li>
<li>SQLite 支持 SQL92（SQL2）标准的大多数查询语言的功能。</li>
<li>SQLite 使用 ANSI-C 编写的，并提供了简单和易于使用的 API。</li>
<li>SQLite 可在 UNIX（Linux, Mac OS-X, Android, iOS）和 Windows（Win32, WinCE, WinRT）中运行。</li>
</ul>


<h4>SQLite 命令</h4>

<p>与关系数据库进行交互的标准 SQLite 命令类似于 SQL。命令包括 CREATE、SELECT、INSERT、UPDATE、DELETE 和 DROP。这些命令基于它们的操作性质可分为以下几种：</p>

<h4>DDL - 数据定义语言</h4>

<table>
<thead>
<tr>
<th> 命令   </th>
<th> 描述 </th>
</tr>
</thead>
<tbody>
<tr>
<td>CREATE </td>
<td>创建一个新的表，一个表的视图，或者数据库中的其他对象。</td>
</tr>
<tr>
<td>ALTER  </td>
<td>修改数据库中的某个已有的数据库对象，比如一个表。     </td>
</tr>
<tr>
<td>DROP   </td>
<td>删除整个表，或者表的视图，或者数据库中的其他对象。   </td>
</tr>
</tbody>
</table>


<h4>DML - 数据操作语言</h4>

<table>
<thead>
<tr>
<th> 命令   </th>
<th> 描述 </th>
</tr>
</thead>
<tbody>
<tr>
<td>INSERT </td>
<td>创建一条记录。</td>
</tr>
<tr>
<td>UPDATE </td>
<td>修改记录。      </td>
</tr>
<tr>
<td>DELETE </td>
<td>删除记录。      </td>
</tr>
</tbody>
</table>


<h4>DQL - 数据查询语言</h4>

<table>
<thead>
<tr>
<th> 命令   </th>
<th> 描述 </th>
</tr>
</thead>
<tbody>
<tr>
<td>SELECT </td>
<td>   从一个或多个表中检索某些记录。</td>
</tr>
</tbody>
</table>


<h4>在 Mac OS X 上安装 SQLite</h4>

<p>最新版本的 Mac OS X 会预安装 SQLite，但是如果没有可用的安装，只需按照如下步骤进行：
请访问 <a href="http://www.sqlite.org/download.html">SQLite 下载页面</a>，从源代码区下载 sqlite-autoconf-*.tar.gz。
步骤如下：</p>

<pre><code>$tar xvfz sqlite-autoconf-3071502.tar.gz
$cd sqlite-autoconf-3071502
$./configure --prefix=/usr/local
$make
$make install
</code></pre>

<p>上述步骤将在 Mac OS X 机器上安装 SQLite，您可以使用下列命令进行验证：</p>

<pre><code>$sqlite3
SQLite version 3.7.15.2 2013-01-09 11:53:05
Enter ".help" for instructions
Enter SQL statements terminated with a ";"
sqlite&gt;
</code></pre>

<p>最后，在 SQLite 命令提示符下，使用 SQLite 命令做练习。</p>

<h4>SQLite语法</h4>

<p><strong>大小写敏感性</strong></p>

<p>有个重要的点值得注意，SQLite 是不区分大小写的，但也有一些命令是大小写敏感的，比如 GLOB 和 glob 在 SQLite 的语句中有不同的含义。</p>

<p><strong>注释</strong></p>

<p>SQLite 注释是附加的注释，可以在 SQLite 代码中添加注释以增加其可读性，他们可以出现在任何空白处，包括在表达式内和其他 SQL 语句的中间，但它们不能嵌套。
SQL 注释以两个连续的 &ldquo;-&rdquo; 字符（ASCII 0x2d）开始，并扩展至下一个换行符（ASCII 0x0a）或直到输入结束，以先到者为准。
您也可以使用 C 风格的注释，以 &ldquo;/*&rdquo; 开始，并扩展至下一个 &ldquo;*/&rdquo; 字符对或直到输入结束，以先到者为准。SQLite的注释可以跨越多行。</p>

<h4>SQLite 语句</h4>

<p>所有的 SQLite 语句可以以任何关键字开始，如 SELECT、INSERT、UPDATE、DELETE、ALTER、DROP 等，所有的语句以分号（;）结束。</p>

<p>SQLite ANALYZE 语句：</p>

<pre><code>ANALYZE;
or
ANALYZE database_name;
or
ANALYZE database_name.table_name;
</code></pre>

<p>SQLite AND/OR 子句：</p>

<pre><code>SELECT column1, column2....columnN
FROM   table_name
WHERE  CONDITION-1 {AND|OR} CONDITION-2;
</code></pre>

<p>SQLite ALTER TABLE 语句：</p>

<pre><code>ALTER TABLE table_name ADD COLUMN column_def...;
SQLite ALTER TABLE 语句（Rename）：
ALTER TABLE table_name RENAME TO new_table_name;
</code></pre>

<p>SQLite ATTACH DATABASE 语句：</p>

<pre><code>ATTACH DATABASE 'DatabaseName' As 'Alias-Name';
SQLite BEGIN TRANSACTION 语句：
BEGIN;
or
BEGIN EXCLUSIVE TRANSACTION;
</code></pre>

<p>SQLite BETWEEN 子句：</p>

<pre><code>SELECT column1, column2....columnN
FROM   table_name
WHERE  column_name BETWEEN val-1 AND val-2;
</code></pre>

<p>SQLite COMMIT 语句：</p>

<pre><code>COMMIT;
</code></pre>

<p>SQLite CREATE INDEX 语句：</p>

<pre><code>CREATE INDEX index_name
ON table_name ( column_name COLLATE NOCASE );
</code></pre>

<p>SQLite CREATE UNIQUE INDEX 语句：</p>

<pre><code>CREATE UNIQUE INDEX index_name
ON table_name ( column1, column2,...columnN);
</code></pre>

<p>SQLite CREATE TABLE 语句：</p>

<pre><code>CREATE TABLE table_name(
   column1 datatype,
   column2 datatype,
   column3 datatype,
   .....
   columnN datatype,
   PRIMARY KEY( one or more columns )
);
</code></pre>

<p>SQLite CREATE TRIGGER 语句：</p>

<pre><code>CREATE TRIGGER database_name.trigger_name 
BEFORE INSERT ON table_name FOR EACH ROW
BEGIN 
   stmt1; 
   stmt2;
   ....
END;
</code></pre>

<p>SQLite CREATE VIEW 语句：</p>

<pre><code>CREATE VIEW database_name.view_name  AS
SELECT statement....;
</code></pre>

<p>SQLite CREATE VIRTUAL TABLE 语句：</p>

<pre><code>CREATE VIRTUAL TABLE database_name.table_name USING weblog( access.log );
or
CREATE VIRTUAL TABLE database_name.table_name USING fts3( );
</code></pre>

<p>SQLite COMMIT TRANSACTION 语句：</p>

<pre><code>COMMIT;
SQLite COUNT 子句：
SELECT COUNT(column_name)
FROM   table_name
WHERE  CONDITION;
</code></pre>

<p>SQLite DELETE 语句：</p>

<pre><code>DELETE FROM table_name
WHERE  {CONDITION};
</code></pre>

<p>SQLite DETACH DATABASE 语句：</p>

<pre><code>DETACH DATABASE 'Alias-Name';
</code></pre>

<p>SQLite DISTINCT 子句：</p>

<pre><code>SELECT DISTINCT column1, column2....columnN
FROM   table_name;
</code></pre>

<p>SQLite DROP INDEX 语句：</p>

<pre><code>DROP INDEX database_name.index_name;
</code></pre>

<p>SQLite DROP TABLE 语句：</p>

<pre><code>DROP TABLE database_name.table_name;
</code></pre>

<p>SQLite DROP VIEW 语句：</p>

<pre><code>DROP INDEX database_name.view_name;
</code></pre>

<p>SQLite DROP TRIGGER 语句：</p>

<pre><code>DROP INDEX database_name.trigger_name;
</code></pre>

<p>SQLite EXISTS 子句：</p>

<pre><code>SELECT column1, column2....columnN
FROM   table_name
WHERE  column_name EXISTS (SELECT * FROM   table_name );
</code></pre>

<p>SQLite EXPLAIN 语句：</p>

<pre><code>EXPLAIN INSERT statement...;
or 
EXPLAIN QUERY PLAN SELECT statement...;
</code></pre>

<p>SQLite GLOB 子句：</p>

<pre><code>SELECT column1, column2....columnN
FROM   table_name
WHERE  column_name GLOB { PATTERN };
</code></pre>

<p>SQLite GROUP BY 子句：</p>

<pre><code>SELECT SUM(column_name)
FROM   table_name
WHERE  CONDITION
GROUP BY column_name;
</code></pre>

<p>SQLite HAVING 子句：</p>

<pre><code>SELECT SUM(column_name)
FROM   table_name
WHERE  CONDITION
GROUP BY column_name
HAVING (arithematic function condition);
</code></pre>

<p>SQLite INSERT INTO 语句：</p>

<pre><code>INSERT INTO table_name( column1, column2....columnN)
VALUES ( value1, value2....valueN);
</code></pre>

<p>SQLite IN 子句：</p>

<pre><code>SELECT column1, column2....columnN
FROM   table_name
WHERE  column_name IN (val-1, val-2,...val-N);
</code></pre>

<p>SQLite Like 子句：</p>

<pre><code>SELECT column1, column2....columnN
FROM   table_name
WHERE  column_name LIKE { PATTERN };
</code></pre>

<p>SQLite NOT IN 子句：</p>

<pre><code>SELECT column1, column2....columnN
FROM   table_name
WHERE  column_name NOT IN (val-1, val-2,...val-N);
</code></pre>

<p>SQLite ORDER BY 子句：</p>

<pre><code>SELECT column1, column2....columnN
FROM   table_name
WHERE  CONDITION
ORDER BY column_name {ASC|DESC};
</code></pre>

<p>SQLite PRAGMA 语句：</p>

<pre><code>PRAGMA pragma_name;

For example:

PRAGMA page_size;
PRAGMA cache_size = 1024;
PRAGMA table_info(table_name);
</code></pre>

<p>SQLite RELEASE SAVEPOINT 语句：</p>

<pre><code>RELEASE savepoint_name;
</code></pre>

<p>SQLite REINDEX 语句：</p>

<pre><code>REINDEX collation_name;
REINDEX database_name.index_name;
REINDEX database_name.table_name;
</code></pre>

<p>SQLite ROLLBACK 语句：</p>

<pre><code>ROLLBACK;
or
ROLLBACK TO SAVEPOINT savepoint_name;
</code></pre>

<p>SQLite SAVEPOINT 语句：</p>

<pre><code>SAVEPOINT savepoint_name;
SQLite SELECT 语句：
SELECT column1, column2....columnN
FROM   table_name;
</code></pre>

<p>SQLite UPDATE 语句：</p>

<pre><code>UPDATE table_name
SET column1 = value1, column2 = value2....columnN=valueN
[ WHERE  CONDITION ];
</code></pre>

<p>SQLite VACUUM 语句：</p>

<pre><code>VACUUM;
</code></pre>

<p>SQLite WHERE 子句：</p>

<pre><code>SELECT column1, column2....columnN
FROM   table_name
WHERE  CONDITION;
</code></pre>

<p>资料收藏：</p>

<ul>
<li><a href="http://www.runoob.com/sqlite/sqlite-tutorial.html">SQLite教程</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
