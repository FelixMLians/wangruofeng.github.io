<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ios | 王若风的小窝]]></title>
  <link href="http://wangruofeng.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://wangruofeng.github.io/"/>
  <updated>2016-01-13T16:43:40+08:00</updated>
  <id>http://wangruofeng.github.io/</id>
  <author>
    <name><![CDATA[Ace]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CocoaPods使用指南]]></title>
    <link href="http://wangruofeng.github.io/blog/2016/01/13/cocoapodsshi-yong-zhi-nan/"/>
    <updated>2016-01-13T05:51:18+08:00</updated>
    <id>http://wangruofeng.github.io/blog/2016/01/13/cocoapodsshi-yong-zhi-nan</id>
    <content type="html"><![CDATA[<p>CocoaPods是iOS最常用的第三方类库管理工具，绝大部分有名的开源类库
支持CocoaPods.
CocoaPods是用Ruby实现的，要使用它首先需要有Ruby的环境。幸亏是
OS X系统默认已经可以运行Ruby了，我么只需执行以下命令：</p>

<pre><code class="objective-c">sudo gem install cocoapods
</code></pre>

<p>由于某些原因，执行时会出现下面的错误提示：</p>

<pre><code class="objective-c">ERROR :Could not find a valid gem `cocoapods` (&gt;= 0), here is why:
        Unable to download data from https://rubygems.org/ - Errno::EPIPI:
        Broken pipe - SSL_connect
(https://rubygems.org/lastest_specs.4.8.gz)
</code></pre>

<p>安装成功后，接着执行命令：</p>

<pre><code class="objective-c">pod setup
</code></pre>

<p>如果Ruby环境不够新，可能需要更新以下：</p>

<pre><code class="objective-c">sudo gem update --system
</code></pre>

<p>至此安装就完成了，我们可以尝试搜索一个第三方类库：</p>

<pre><code class="objective-c">pod search AFNetworking
</code></pre>

<p>使用CocoaPods第一步，是在当前项目下，新疆一个Podfile文件：</p>

<pre><code class="objective-c">touch Podfile
</code></pre>

<p>然后利用vim打开Podfile文件编辑，加入你想要的类库，格式如下：</p>

<pre><code class="objective-c">platform :ios
pod  'Reachability', '3.1.0'

platform :ios, '6.0'
pod 'JSONKit', '1.4'
pod 'AFNetworking', '~&gt; 2.3,1'
</code></pre>

<p>如果是拷贝别人的项目，或是一个很久没打开过的项目，可能需要先执行一下：</p>

<pre><code class="objective-c">pod update
</code></pre>

<p>最后一步，执行命令：</p>

<pre><code class="objective-c">pod install
</code></pre>

<p>当终端出现类似下面的提示后，就代表成功了：</p>

<pre><code class="objective-c">[!] From now no use `Sample0814.xcworkspace`.
</code></pre>

<p>这个时候会看到项目文件夹多了一个xxx.xcworkspace,以后要通过这个文件
打开项目，老项目xxx.xcodeproj不再使用。</p>

<blockquote><ol>
<li>上面的每一步都可能出现问题，但大部分问题都是因为局域网的原因，用一个网速稳
定的境外VPN可破</li>
<li>如果上面因为权限问题安装失败，必须每次都要删除</li>
</ol>


<pre><code class="objective-c">rm -rf /User/loginname/Library/Caches/CocoaPods/
</code></pre>

<p>因为这个缓冲中会存下你的github的东西，造成每次调用上次权限问题的缓存。
3. 关于Podfile文件编辑时，第三方版本号的各种写法:</p></blockquote>

<pre><code class="objective-c">pod ‘AFNetworking’      //不显式指定依赖库版本，表示每次都获取最新版本
pod ‘AFNetworking’,  ‘2.0’     //只使用2.0版本
pod ‘AFNetworking’, ‘&gt;2.0′     //使用高于2.0的版本
pod ‘AFNetworking’, ‘&gt;=2.0′     //使用大于或等于2.0的版本
pod ‘AFNetworking’, ‘&lt;2.0′     //使用小于2.0的版本
pod ‘AFNetworking’, ‘&lt;=2.0′     //使用小于或等于2.0的版本
pod ‘AFNetworking’, ‘~&gt;0.1.2′     //使用大于等于0.1.2但小于0.2的版本，相当于&gt;=0.1.2并且&lt;0.2.0
pod ‘AFNetworking’, ‘~&gt;0.1′     //使用大于等于0.1但小于1.0的版本
pod ‘AFNetworking’, ‘~&gt;0′     //高于0的版本，写这个限制和什么都不写是一个效果，都表示使用最新版本
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GET&amp;POST]]></title>
    <link href="http://wangruofeng.github.io/blog/2016/01/13/get-and-post/"/>
    <updated>2016-01-13T05:48:10+08:00</updated>
    <id>http://wangruofeng.github.io/blog/2016/01/13/get-and-post</id>
    <content type="html"><![CDATA[<blockquote><p>GET和POST是两种最常用的与服务器进行交互的HTTP方法 .</p></blockquote>

<h3>GET</h3>

<ul>
<li>GET的语义是获取指定的URL资源, 将数据按照 variable = value 的形式, 添加到action所指向的URL后面, 并且两者使用 &lsquo; ? '连接, 各变量之间使用 &rsquo; &amp; &lsquo;连接 .</li>
<li>对用户来说不安全, 因为在传输过程中, 数据被放在请求的URL中.</li>
<li>传输的数据量小, 这主要是因为受URL长度限制.</li>
</ul>


<h3>URL长度限制</h3>

<p> 在http协议中，其实并没有对url长度作出限制，往往url的最大长度和用户浏览器和Web服务器有关，不一样的浏览器，能接受的最大长度往往是不一样的，当然，不一样的Web服务器能够处理的最大长度的URL的能力也是不一样的。</p>

<pre><code>IE浏览器对URL的最大限制为2083个字符，如果超过这个数字，提交按钮没有任何反应。

Firefox浏览器URL的长度限制为65,536个字符 ;

Apache(Server)能够接受的最大URL长度为8192个字符 ;

如果浏览器的编码为UTF8的话，一个汉字最终编码后的字符长度为9个字符。
</code></pre>

<p>GET请求示例</p>

<p><img src="http://static.oschina.net/uploads/space/2014/0602/164040_3SOT_1774273.png" alt="GetRequest" /></p>

<h3>POST</h3>

<ul>
<li>POST语义是向指定URL的资源添加数据.</li>
<li>将数据放在数据体中, 按照变量和值相对应的方式, 传递到action所指向的URL.</li>
<li>所有数据对用户来说不可见.</li>
<li>可以传输大量数据, 上传文件只能使用POST.</li>
</ul>


<p>POST请求示例</p>

<p><img src="http://static.oschina.net/uploads/space/2014/0602/164119_VRKY_1774273.png" alt="PostRequest" /></p>

<h3>在浏览器中判断GET&amp;POST请求</h3>

<p>因为POST请求会向服务器发送数据体, 因此刷新页面时会出现提示窗口. 而GET请求不会向服务器发送数据体, 因此没有提示 .</p>

<p>从请求本质来看, GET请求要比POST更安全, 效率也会更高 .(对服务器而言)</p>

<h3>iOS网络发送网络请求的步骤</h3>

<ol>
<li><p>实例化URL( 网络资源 ) ;</p></li>
<li><p>根据URL建立URLRequest ( 网络请求 ) ;</p>

<p> 默认为GET请求; 对于POST请求,  需要创建请求的数据体 .</p></li>
<li><p>利用 URLConnection 发送网络请求(发送请求并获得结果) ;</p></li>
</ol>


<p>NSURLConnection提供了两个静态方法可以直接以同步或异步的方式向服务器发送网络请求.</p>

<pre><code>同步请求:

sendSynchronousRequest : returningResponse : error :

异步请求:

sendAsynchronousRequest : queue : completionHandler :
</code></pre>

<p>在网络请求过程中, 接收数据的过程实际上是通过 NSURLConnectionDataDelegate来实现的, 常用代理方法包括:</p>

<pre><code class="objective-c">// 服务器开始返回数据
-(void)connection:didReceiveResponse:
// 收到服务器返回的数据，本方法会被调用多次
-(void)connection:didReceiveData:
// 数据接收完毕，做数据的最后处理
-(void)connectionDidFinishLoading:
// 网络连接错误
-(void)connection:didFailWithError:
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Http Post and Multipart Forms]]></title>
    <link href="http://wangruofeng.github.io/blog/2016/01/13/http-post-and-multipart-forms/"/>
    <updated>2016-01-13T05:45:41+08:00</updated>
    <id>http://wangruofeng.github.io/blog/2016/01/13/http-post-and-multipart-forms</id>
    <content type="html"><![CDATA[<p>参考资料：</p>

<ul>
<li><a href="http://nthn.me/posts/2012/objc-multipart-forms.html">Sending Multipart Forms with Objective-C</a></li>
<li><a href="http://stackoverflow.com/questions/24250475/post-multipart-form-data-with-objective-c">POST multipart/form-data with Objective-C</a></li>
<li><a href="http://stackoverflow.com/questions/15749486/sending-an-http-post-request-on-ios">Sending an HTTP POST request on iOS</a></li>
<li><a href="http://www.w3.org/Protocols/rfc1341/7_2_Multipart.html">The Multipart Content-Type&ndash;w3规范</a></li>
</ul>


<p>注意事项：</p>

<ul>
<li>http Body 中的NSData 编码方式要用<code>NSASCIIStringEncoding</code>而不是<code>NSUTF8StringEncoding</code></li>
<li><p>通过</p>

<p>  <code>NSString *postLength = [NSString stringWithFormat:@"%d",[postData length]];</code>     <br/>
计算数据的长度</p></li>
</ul>


<h4>POST参数设置</h4>

<pre><code class="objective-c">        //设置header Content-Length
        [request setValue:postLength forHTTPHeaderField:@"Content-Length"];
        //设置header contentType
        [request setValue:@"application/x-www-form-urlencoded" forHTTPHeaderField:@"Current-Type"];
        //设置body
        [request setHTTPBody:postData];
</code></pre>

<blockquote><p>备注:普通<code>post</code>的<code>header</code>的<code>Current-Type</code>为<code>application/x-www-form-urlencoded</code></p></blockquote>

<h4>Multipart Forms POST参数设置</h4>

<pre><code class="objective-c">        //设置header contentType
        NSString *contentType = [NSString stringWithFormat:@"multipart/form-data; boundary=%@", boundary];
        [request addValue:contentType forHTTPHeaderField:@"Content-Type"];

        //设置body contentType
        [body appendData:[@"Content-Type: application/octet-stream\r\n\r\n" dataUsingEncoding:NSUTF8StringEncoding]];
</code></pre>

<blockquote><p>备注:<code>Multipart Forms</code>的<code>header</code>的<code>Current-Type</code>为<code>multipart/form-data</code></p></blockquote>

<p>request body like this</p>

<pre><code>    --YOUR_BOUNDARY_STRING
    Content-Disposition: form-data; name="photo"; filename="calm.jpg"
    Content-Type: image/jpeg

    YOUR_IMAGE_DATA_GOES_HERE
    --YOUR_BOUNDARY_STRING
    Content-Disposition: form-data; name="message"

    My first message
    --YOUR_BOUNDARY_STRING
    Content-Disposition: form-data; name="user"

    1
    --YOUR_BOUNDARY_STRING
</code></pre>

<p>I’m sending over three variables: an image named photo, a string named message, and an integer named user. It’s important to note the linebreaks and the dashes before the boundary string. These must be included in order to build a good request. Now lets write some objective-c:</p>

<pre><code class="objective-c">
    NSString *boundary = @"YOUR_BOUNDARY_STRING";
    NSString *contentType = [NSString stringWithFormat:@"multipart/form-data; boundary=%@", boundary];
    [request addValue:contentType forHTTPHeaderField:@"Content-Type"];

    NSMutableData *body = [NSMutableData data];

    [body appendData:[[NSString stringWithFormat:@"\r\n--%@\r\n", boundary] dataUsingEncoding:NSUTF8StringEncoding]];
    [body appendData:[[NSString stringWithFormat:@"Content-Disposition: form-data; name=\"photo\"; filename=\"%@.jpg\"\r\n", self.message.photoKey] dataUsingEncoding:NSUTF8StringEncoding]];
    [body appendData:[@"Content-Type: application/octet-stream\r\n\r\n" dataUsingEncoding:NSUTF8StringEncoding]];
    [body appendData:[NSData dataWithData:imageData]];

    [body appendData:[[NSString stringWithFormat:@"\r\n--%@\r\n", boundary] dataUsingEncoding:NSUTF8StringEncoding]];
    [body appendData:[[NSString stringWithFormat:@"Content-Disposition: form-data; name=\"message\"\r\n\r\n%@", self.message.message] dataUsingEncoding:NSUTF8StringEncoding]];

    [body appendData:[[NSString stringWithFormat:@"\r\n--%@\r\n", boundary] dataUsingEncoding:NSUTF8StringEncoding]];
    [body appendData:[[NSString stringWithFormat:@"Content-Disposition: form-data; name=\"user\"\r\n\r\n%d", 1] dataUsingEncoding:NSUTF8StringEncoding]];

    [body appendData:[[NSString stringWithFormat:@"\r\n--%@\r\n", boundary] dataUsingEncoding:NSUTF8StringEncoding]];

    [request setHTTPBody:body];
</code></pre>

<p>Now all we need to do is make a connection to the server and send the request:</p>

<pre><code>[request setHTTPBody:body];
</code></pre>

<pre><code class="objective-c">    NSURLResponse *response;
    NSError *error;

    [NSURLConnection sendSynchronousRequest:request returningResponse:&amp;response error:&amp;error];
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[工厂模式详解]]></title>
    <link href="http://wangruofeng.github.io/blog/2016/01/13/gong-han-mo-shi-xiang-jie/"/>
    <updated>2016-01-13T05:39:21+08:00</updated>
    <id>http://wangruofeng.github.io/blog/2016/01/13/gong-han-mo-shi-xiang-jie</id>
    <content type="html"><![CDATA[<h1>3种工厂模式</h1>

<p>概述：工厂模式是个系列，分为简单工厂模式， 工厂方法模式， 抽象工厂模式，这三种模式也非常常用。这些模式最最经典的就例子就是设计计算器。
* Factory Method (工厂方法模式)
* Abstract Factory (抽象工厂模式）
* Simple Factory（简单工厂模式）</p>

<p><code>参考GoF《Design Patterns》一书</code></p>

<p>GOF是这样描述工厂模式的：</p>

<blockquote><p>“Define an interface for creating an object, but let subclasses decide which class to instantiate. Factory Method lets a class defer instantiation to subclasses.”</p>

<p>在基类中定义创建对象的一个接口，让子类决定实例化哪个类。工厂方法让一个类的实例化延迟到子类中进行。</p></blockquote>

<h3>1.简单工厂模式</h3>

<p>  严格的说，简单工厂模式并不是23种常用的设计模式之一，它只算工厂模式的一个特殊实现。简单工厂模式在实际中的应用相对于其他2个工厂模式用的还是相对少得多，因为它只适应很多简单的情况，最最重要的是它违背了我们在概述中说的开放-封闭原则。因为每次你要新添加一个功能，都需要在生switch-case 语句（或者if-else 语句）中去修改代码，添加分支条件</p>

<p>  简单工厂模式角色分配：</p>

<ol>
<li><p>Creator（产品创建者）
简单工厂模式的核心，它负责实现创建所有实例的内部逻辑。工厂类可以被外界直接调用，创建所需的产品对象。</p></li>
<li><p>Product （ 产品抽象类）
简单工厂模式所创建的所有对象的父类，它负责描述所有实例所共有的公共接口。</p></li>
<li><p>Concrete Product （具体产品）
是简单工厂模式的创建目标，所有创建的对象都是充当这个角色的某个具体类的实例。</p></li>
</ol>


<p>简单的工厂模式UML图
<img src="http://ww1.sinaimg.cn/mw690/64124373gw1ezgte12komj20h109smxx.jpg" alt="简单工厂模式" /></p>

<p>考虑下面一个事例： 加入你是一个商人，你做的的是手机生意。现在你生产android 手机和iphone等，考虑到以后你可能还会生产其他手机例如ubuntu手机。假定你选择了简单工厂模式来实现。那么显然，我们需要所有产品的抽象基类（Product） 即是Phone类：
<code>java
class Phone   
{  
public:  
    virtual ~Phone(){};//在删除的时候防止内存泄露  
    virtual void call(string number) = 0;  
};
</code></p>

<p>然后我们需要具体的产品类 Concrete Product： AndroidPhone 和iOSPhone
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">AndroidPhone</span> <span class="o">:</span> <span class="kd">public</span> <span class="n">Phone</span> <span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="o">{&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="kd">public</span><span class="o">:&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">call</span><span class="o">(</span><span class="n">string</span> <span class="n">number</span><span class="o">){</span> <span class="n">cout</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;&amp;</span><span class="n">lt</span><span class="o">;&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">AndroidPhone</span> <span class="n">is</span> <span class="n">calling</span><span class="o">&amp;</span><span class="n">hellip</span><span class="o">;&amp;</span><span class="n">rdquo</span><span class="o">;&amp;</span><span class="n">lt</span><span class="o">;&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">endl</span><span class="o">;}&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="o">};&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">class</span> <span class="nc">IosPhone</span> <span class="o">:</span> <span class="kd">public</span> <span class="n">Phone</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="o">{&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="kd">public</span><span class="o">:&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">call</span><span class="o">(</span><span class="n">string</span> <span class="n">number</span><span class="o">)</span> <span class="o">{</span> <span class="n">cout</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;&amp;</span><span class="n">lt</span><span class="o">;&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">IosPhone</span> <span class="n">is</span> <span class="n">calling</span><span class="o">&amp;</span><span class="n">hellip</span><span class="o">;&amp;</span><span class="n">rdquo</span><span class="o">;&amp;</span><span class="n">lt</span><span class="o">;&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">endl</span><span class="o">;}&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="o">};</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>最后我们需要Creator
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">PhoneFactory</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="o">{&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="kd">public</span><span class="o">:&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="n">Phone</span><span class="o">*</span> <span class="n">createPhone</span><span class="o">(</span><span class="n">string</span> <span class="n">phoneName</span><span class="o">)&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="o">{&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>        <span class="k">if</span><span class="o">(</span><span class="n">phoneName</span> <span class="o">==</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">AndroidPhone</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;)&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>        <span class="o">{&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">new</span> <span class="nf">AndroidPhone</span><span class="o">();&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>        <span class="o">}</span><span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">phoneName</span> <span class="o">==</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">IosPhone</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;)&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>        <span class="o">{&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">new</span> <span class="nf">IosPhone</span><span class="o">();&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>        <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="k">return</span> <span class="n">NULL</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;};</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>客户端这样实现：
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">void</span> <span class="nf">main</span><span class="o">()&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="o">{&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="n">PhoneFactor</span> <span class="n">factory</span><span class="o">;&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="n">Phone</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">myAndroid</span> <span class="o">=</span> <span class="n">factory</span><span class="o">.</span><span class="na">createPhone</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">AndroidPhone</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;);&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="n">Phone</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">myIPhone</span> <span class="o">=</span> <span class="n">factory</span><span class="o">.</span><span class="na">createPhone</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">iOSPhone</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;);&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="k">if</span><span class="o">(</span><span class="n">myAndroid</span><span class="o">)&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="o">{&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>        <span class="n">myAndroid</span><span class="o">-&gt;</span><span class="n">call</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="mi">123</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;);&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>        <span class="n">delete</span> <span class="n">myAndroid</span><span class="o">;&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>        <span class="n">myAndroid</span> <span class="o">=</span> <span class="n">NULL</span><span class="o">;&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span><span class="o">(</span><span class="n">myIPhone</span><span class="o">)</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="n">myIPhone</span><span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span><span class="n">call</span><span class="o">(</span><span class="s">&quot;123&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">delete</span>  <span class="n">myIPhone</span><span class="o">;</span>
</span><span class='line'>    <span class="n">myIPhone</span> <span class="o">=</span> <span class="n">NULL</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>这就是简单工厂方法，把所有的创建交给creator,creator 通过switch-case(或者if-else)语句来选择具体创建的对象。简单明了。但是就如上面所说，它最致命的问题的违背了开放-封闭原则。每次你要新添加一个功能，都要修改factor里面的createPhone代码。 但是工厂方法模式可以解决这个问题。</p>

<h3>2.工厂方法模式</h3>

<p>个人觉得工厂方法模式在工厂模式家族中是用的最多模式。上面说过了，如果简单工厂模式，要添加一个新功能，比如我现在要增加WinPhone 的生产，那么我要修改PhoneFactory中的createPhone 中的分支判断条件。这违背了开放-封闭原则，那为什么不能将创建方法放到子类中呢？
工厂方法的定义就是：定义一个用于创建对象的接口，让子类决定实例化哪一个类，工厂方法使一个类的实例化延迟到其子类。</p>

<p>  工厂方法模式角色：
1. 抽象工厂(Creator)角色：是工厂方法模式的核心，与应用程序无关。任何在模式中创建的对象的工厂类必须实现这个接口。
2. 具体工厂(Concrete Creator)角色：这是实现抽象工厂接口的具体工厂类，包含与应用程序密切相关的逻辑，并且受到应用程序调用以创建产品对象。
3. 抽象产品(Product)角色：工厂方法模式所创建的对象的超类型，也就是产品对象的共同父类或共同拥有的接口。
4. 具体产品(Concrete Product)角色：这个角色实现了抽象产品角色所定义的接口。某具体产品有专门的具体工厂创建，它们之间往往一一对应</p>

<p>工厂方法模式UML图：
<img src="http://ww1.sinaimg.cn/mw690/64124373gw1ezgtqlod9zj20hy0aijrz.jpg" alt="工厂方法模式" /></p>

<p>看定义看的晕乎乎的？那么我们来看代码：产品接口，以及其相应的子类。
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">Phone</span> <span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="o">{&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="kd">public</span><span class="o">:&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="n">virtual</span> <span class="o">~</span><span class="n">Phone</span><span class="o">(){};</span><span class="c1">//在删除的时候防止内存泄露&lt;br/&gt;</span>
</span><span class='line'>    <span class="n">virtual</span> <span class="kt">void</span> <span class="nf">call</span><span class="o">(</span><span class="n">string</span> <span class="n">number</span><span class="o">)</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="o">};&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">class</span> <span class="nc">AndroidPhone</span> <span class="o">:</span> <span class="kd">public</span> <span class="n">Phone</span> <span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="o">{&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="kd">public</span><span class="o">:&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">call</span><span class="o">(</span><span class="n">string</span> <span class="n">number</span><span class="o">){</span> <span class="n">cout</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;&amp;</span><span class="n">lt</span><span class="o">;&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">AndroidPhone</span> <span class="n">is</span> <span class="n">calling</span><span class="o">&amp;</span><span class="n">hellip</span><span class="o">;&amp;</span><span class="n">rdquo</span><span class="o">;&amp;</span><span class="n">lt</span><span class="o">;&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">endl</span><span class="o">;}&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="o">};&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">class</span> <span class="nc">iOSPhone</span> <span class="o">:</span> <span class="kd">public</span> <span class="n">Phone</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="o">{&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="kd">public</span><span class="o">:&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">call</span><span class="o">(</span><span class="n">string</span> <span class="n">number</span><span class="o">)</span> <span class="o">{</span> <span class="n">cout</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;&amp;</span><span class="n">lt</span><span class="o">;&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">iOSPhone</span> <span class="n">is</span> <span class="n">calling</span><span class="o">&amp;</span><span class="n">hellip</span><span class="o">;&amp;</span><span class="n">rdquo</span><span class="o">;&amp;</span><span class="n">lt</span><span class="o">;&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">endl</span><span class="o">;}&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="o">};</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>上面这个和简单工厂方法还是一样的。接下来不一样的来了&hellip;
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">PhoneFactory</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="o">{&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="kd">public</span><span class="o">:&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="n">virtual</span> <span class="o">~</span><span class="n">PhoneFactory</span><span class="o">(){};&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="n">virtual</span> <span class="n">Phone</span><span class="o">*</span> <span class="n">createPhone</span><span class="o">()</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="o">};&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">class</span> <span class="nc">AndroidPhoneFactory</span> <span class="o">:</span> <span class="kd">public</span> <span class="n">PhoneFactory</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="o">{&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="kd">public</span><span class="o">:&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="n">virtual</span> <span class="n">Phone</span><span class="o">*</span> <span class="n">createPhone</span><span class="o">()&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="o">{&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">AndroidPhone</span><span class="o">();&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="o">}&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="o">};&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">class</span> <span class="nc">IosPhoneFactory</span> <span class="o">:</span> <span class="kd">public</span> <span class="n">PhoneFactory</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="o">{&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="kd">public</span><span class="o">:&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="n">virtual</span> <span class="n">Phone</span><span class="o">*</span> <span class="n">createPhone</span><span class="o">()&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="o">{&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">IosPhone</span><span class="o">();&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="o">}&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="o">};</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>工厂方法将PhoneFactory抽象成了基类，PhoneFactory的createPhone不在像以前那样将所有的判断塞到里面。而是改由其子类来实现创建功能，这感觉就是权力下放。
客户端：</p>

<pre><code class="java">void main()  
{  
    PhoneFactory*  androidCreator = new AndroidPhoneFactory();  
    PhoneFactory*  iosCreator = new IosPhoneFactory();  
    Phone*  myAndroid = androidCreator-&gt;createPhone();  
    Phone* myIPhone = iosCreator-&gt;createPhone();  
    if(myAndroid)  
    {  
        myAndroid-&gt;call("123");  
        delete myAndroid;  
        myAndroid = NULL;  
    }  

    if(myIPhone)  
    {  
        myIPhone-&gt;call("123");  
        delete  myIPhone;  
        myIPhone = NULL;  
    }  

    delete androidCreator;  
    delete iosCreator;  
}
</code></pre>

<p>在工厂方法模式中，核心工厂类不在负责产品的创建，而是将具体的创建工作交给子类去完成。也就是后所这个核心工厂仅仅只是提供创建的接口，具体实现方法交给继承它的子类去完成。当我们的系统需要增加其他新功能时，只需要继承PhoneFactory这个类，并且实现createPhone接口。 不需要对原工厂PhoneFactory进行任何修改，这样很好地符合了“开放-封闭“原则。</p>

<p>虽然工厂方法模式满足了"开放-封闭”原则，但是这个模式也仍然有缺点：每次增加一个产品时，都需要增加一个具体类和对象实现工厂，是的系统中类的个数成倍增加，在一定程度上增加了系统的复杂度，同时也增加了系统具体类的依赖。这并不是什么好事。</p>

<h3>3.抽象工厂模式</h3>

<p>在工厂方法模式中，其实我们有一个潜在意识的意识。那就是我们生产的都是同一类产品，例如我们生产的都是手机！那么现在假如现在我们又要生产平板了了呢？那么就要用到抽象工厂模式。我抽象工厂模式也用的比较多在工厂模式家族中，仅次于工厂方法模式。在了解抽象工厂模式之前，还是老生常谈的理清下产品等级结构和产品簇的概念。下面的图还是老图。但是我讲讲我的理解：</p>

<p><img src="http://ww2.sinaimg.cn/mw690/64124373gw1ezgtxoyognj20d8087wes.jpg" alt="抽象工厂模式" />
产品等级结构：产品的等级结构也就是产品的继承结构。我理解就是同一类产品，比如手机是一个系列，有android手机，ios手机，win手机，那么这个抽象类手机和他的子类就构成了一个产品等级结构。那其他的平板显然不是和手机一个系列的，一个平板，一个是手机，所以他们是不同的产品等级结构。</p>

<p>产品族: 在抽象工厂模式中，产品族是指由同一个工厂生产的，位于不同产品等级结构中的一组产品。比如分为android产品，和ios产品。其中一个ios产品包含ios手机和ios平板。显然ios手机和ios平板不是同一个产品等级结构的，因为一个是手机，一个是平板。但他们是同一个产品簇&mdash;都是ios产品。
希望大家通过上面的例子大家明白了这两个概念。</p>

<p> 抽象工厂模式的UML图：
 <img src="http://ww4.sinaimg.cn/mw690/64124373gw1ezgtzs7hwaj20db09p0ta.jpg" alt="抽象工厂模式" /></p>

<p>接着上面的话题，现在假如我要增加对平板的支持，那么我们肯定先添加两个产品等级结构，一个是手机，一个是平板：</p>

<pre><code class="java">//产品等级结构--手机  
class Phone   
{  
public:  
    virtual ~Phone(){};//在删除的时候防止内存泄露  
    virtual void call(string number) = 0;  
};  

class AndroidPhone : public Phone   
{  
public:  
    void call(string number){ cout&lt;&lt;"AndroidPhone is calling..."&lt;&lt;endl; }  
};  

class IosPhone : public Phone  
{  
public:  
    void call(string number) { cout&lt;&lt;"IosPhone is calling..."&lt;&lt;endl; }  
};  

//产品等级结构--平板  
class Pad  
{  
public:  
    virtual ~Pad(){};  
    virtual void playMovie() = 0;  
};  

class AndroidPad : public Pad  
{  
public:  
    virtual void playMovie(){ cout&lt;&lt;"AndriodPad is playing movie..."&lt;&lt;endl; }  
};  

class IosPad : public Pad  
{  
public:  
    virtual void playMovie(){ cout&lt;&lt;"IosPad is playing movie..."&lt;&lt;endl; }  
};  
</code></pre>

<p>然后具体的工厂我们整个工厂是生产移动设备的所以我们取名为MobileFactory,然后工厂可以生产平板和手机，故有了createPhone 和createPad两个接口。
<code>java
class MobileFactory  
{  
public:  
    virtual ~MobileFactory(){};  
    virtual Phone* createPhone() = 0;  
    virtual Pad* createPad() = 0;  
};
</code>
接着是 android 产品簇 的工厂类，负责生产android 的手机和平板：
<code>java
class AndroidFactory : public MobileFactory  
{  
public:  
    Phone* createPhone()  
    {  
        return new AndroidPhone();  
    }  
    Pad* createPad()  
    {  
        return new AndroidPad();  
    }  
};
</code></p>

<p>接着是ios的产品簇的工厂类，负责生产ios的手机和平板：
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">IosFactory</span> <span class="o">:</span> <span class="kd">public</span> <span class="n">MobileFactory</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="o">{&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="kd">public</span><span class="o">:&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="n">Phone</span><span class="o">*</span> <span class="n">createPhone</span><span class="o">()&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="o">{&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">IosPhone</span><span class="o">();&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Pad</span><span class="o">*</span> <span class="n">createPad</span><span class="o">()</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="nf">IosPad</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;};</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>最后客户端这样实现：
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">void</span> <span class="nf">main</span><span class="o">()&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="o">{&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="n">MobileFactory</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span>  <span class="n">androidCreator</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">AndroidFactory</span><span class="o">();&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="n">MobileFactory</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span>  <span class="n">iosCreator</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">IosFactory</span><span class="o">();&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="n">Phone</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span>  <span class="n">myAndroidPhone</span> <span class="o">=</span> <span class="n">androidCreator</span><span class="o">-&gt;</span><span class="n">createPhone</span><span class="o">();&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="n">Pad</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">myAndroidPad</span> <span class="o">=</span> <span class="n">androidCreator</span><span class="o">-&gt;</span><span class="n">createPad</span><span class="o">();&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="n">Phone</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">myIosPhone</span> <span class="o">=</span> <span class="n">iosCreator</span><span class="o">-&gt;</span><span class="n">createPhone</span><span class="o">();&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="n">Pad</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">myIosPad</span> <span class="o">=</span> <span class="n">iosCreator</span><span class="o">-&gt;</span><span class="n">createPad</span><span class="o">();&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">myAndroidPhone</span><span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span><span class="n">call</span><span class="o">(</span><span class="s">&quot;123&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">myAndroidPad</span><span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span><span class="n">playMovie</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="n">myIosPhone</span><span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span><span class="n">call</span><span class="o">(</span><span class="s">&quot;123&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">myIosPad</span><span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span><span class="n">playMovie</span><span class="o">();</span>
</span><span class='line'><span class="c1">//这里没有做释放和判断，请自己判断和释放  </span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>总结：
抽象工厂模式适用于那些有多种产品的产品簇，并且每次使用其中的某一产品簇的产品。
缺点 ： 抽象工厂模式的添加新功能也非常麻烦，比工厂方法模式都还要复杂的多。
优点： 当一个产品族中的多个对象被设计成一起工作时，它能够保证客户端始终只使用同一个产品族中的对象</p>

<h2>主要用途：</h2>

<p>工厂方法要解决的问题是对象的创建时机，它提供了一种扩展的策略，很好地符合了开放封闭原则。工厂方法也叫做虚构造器（Virtual Constructor）。</p>

<p><img src="http://cdn.cocimg.com/cms/uploads/allimg/130516/4196_130516112054_1.png" alt="工厂方法的类结构图" /></p>

<h2>什么时候使用工厂方法</h2>

<p>当是如下情况是，可以使用工厂方法：一个类不知道它所必须创建的对象的类时，一个类希望有它的子类决定所创建的对象时。</p>

<p>更多关于工厂方法的介绍，可以参考本文最后给出的参考内容。下面我们就来看看在iOS中工厂方法的一种实现方法。</p>

<h2>iOS中工厂方法的实现实例</h2>

<p>如下有一个类图，该图描述了下面即将实现的工厂方法（利用工厂方法，创建出不同的形状）。其中BVShapeFactory为工厂方法的基类，BVShape为形状的基类，BVClient通过BVShapeFactory，利用 BVShapeFactory的子类（BVCircleShapeFactory和BVSquareShapeFactory）分别创建出BVCircleShape和BVSquareShape。
<img src="http://cdn.cocimg.com/cms/uploads/allimg/130516/4196_130516112123_1.png" alt="工厂方法" /></p>

<p>github下载地址:<a href="https://github.com/BeyondVincent/ios_patterns/tree/master/FactoryMethodPattern">https://github.com/BeyondVincent/ios_patterns/tree/master/FactoryMethodPattern</a></p>

<p>参考资料</p>

<ul>
<li><a href="http://doc.okbase.net/luozhonglan/archive/103843.html">iOS设计模式——工厂方法（简单工厂模式，工厂方法模式， 抽象工厂模式）</a></li>
<li><a href="http://www.cocoachina.com/ios/20130516/6219.html">iOS设计模式(03):工厂方法</a></li>
<li><a href="http://www.cocoachina.com/ios/20141124/10296.html">Objective-C类族和工厂模式</a></li>
<li><a href="http://crosbymichael.com/objective-c-design-patterns-factory.html">Objective C Design Patterns - Factory</a></li>
<li><a href="https://developer.apple.com/library/ios/documentation/General/Conceptual/CocoaEncyclopedia/ClassFactoryMethods/ClassFactoryMethods.html">Class Factory Methods</a>&ndash;Apple</li>
<li><a href="http://www.raywenderlich.com/46988/ios-design-patterns">iOS Design Patterns</a>&ndash;raywenderlich</li>
<li><a href="http://www.knowstack.com/abstract-factory-design-pattern-objective-c/">Abstract Factory Design Pattern Objective C</a></li>
<li><a href="https://www.binpress.com/tutorial/the-factory-design-pattern-explained-by-example/142">The factory design pattern explained by example</a>-php</li>
<li><a href="https://www.safaribooksonline.com/blog/2014/12/10/design-patterns-series-day-3-factory-singleton-patterns/">Design Patterns Series, Day 3: Factory and Singleton Patterns</a>&ndash;safaribooksonline</li>
<li><a href="http://www.bobmccune.com/2011/04/08/automagic-factories-in-objective-c/">Automagic Factories in Objective-C</a>&ndash;bobmccune</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[多线程之NSThread]]></title>
    <link href="http://wangruofeng.github.io/blog/2016/01/13/duo-xian-cheng-zhi-nsthread/"/>
    <updated>2016-01-13T05:36:48+08:00</updated>
    <id>http://wangruofeng.github.io/blog/2016/01/13/duo-xian-cheng-zhi-nsthread</id>
    <content type="html"><![CDATA[<h2>本文目录</h2>

<ul>
<li>前言</li>
<li>1.获取当前线程</li>
<li>2.获取主线程</li>
<li>3.NSThread的创建</li>
<li>4.暂停当前线程</li>
<li>5.线程的其他操作</li>
<li>6.优缺点</li>
</ul>


<h3>前言</h3>

<p>每个iOS应用程序都有个专门用来更新显示UI界面、处理用户触摸事件的主线程，因此不能将其他太耗时的操作放在主线程中执行，不然会造成主线程堵塞(出现卡机现象)，带来极坏的用户体验。一般的解决方案就是将那些耗时的操作放到另外一个线程中去执行，多线程编程是防止主线程堵塞，增加运行效率的最佳方法。</p>

<p>iOS中有3种常见的多线程编程方法
1. <code>NSThread</code>
这种方法需要管理线程的生命周期、同步、加锁问题，会导致一定的性能开销</p>

<ol>
<li><p><code>NSOperation</code>和<code>NSOperationQueue</code>
是基于OC实现的。NSOperation以面向对象的方式封装了需要执行的操作，然后可以将这个操作放到一个NSOperationQueue中去异步执行。不必关心线程管理、同步等问题。</p></li>
<li><p><code>Grand Centeral Dispatch</code>
简称GCD，iOS4才开始支持，是纯C语言的API。自iPad2开始，苹果设备开始有了双核CPU，为了充分利用这2个核，GCD提供了一些新特性来支持多核并行编程</p></li>
</ol>


<p>这篇文章简单介绍<code>NSThread这</code>个类，一个<code>NSThread</code>实例就代表着一条线程</p>

<h3>1.获取当前线程</h3>

<pre><code class="objective-c">    NSThread *current = [NSThread currentThread];
</code></pre>

<h3>2.获取主线程</h3>

<pre><code class="objective-c">    NSThread *main = [NSThread mainThread];
    NSLog(@"主线程:%@", main);    
</code></pre>

<p>打印结果是：</p>

<pre><code>2013-04-18 21:36:38.599 thread[7499:c07] 主线程:&lt;NSThread: 0x71434e0&gt;{name = (null), num = 1}
</code></pre>

<p>num相当于线程的id，主线程的num是为1的</p>

<h3>3.NSThread的创建</h3>

<h4>a.动态方法</h4>

<pre><code>- (id)initWithTarget:(id)target selector:(SEL)selector object:(id)argument;
</code></pre>

<p>在第2行创建了一条新线程，然后在第4行调用<code>start</code>方法启动线程，线程启动后会调用self的<code>run:</code>方法，并且将@&ldquo;mj"作为方法参数</p>

<pre><code class="objective-c">// 初始化线程
NSThread *thread = [[[NSThread alloc] initWithTarget:self selector:@selector(run:) object:@"mj"] autorelease];
// 开启线程
[thread start];
</code></pre>

<p>假如run:方法是这样的：</p>

<pre><code class="objective-c">- (void)run:(NSString *)string {
     NSThread *current = [NSThread currentThread];
     NSLog(@"执行了run:方法-参数：%@，当前线程：%@", string, current);
}
</code></pre>

<p>打印结果为：</p>

<pre><code>2013-04-18 21:40:33.102 thread[7542:3e13] 执行了run:方法-参数：mj，当前线程：&lt;NSThread: 0x889e8d0&gt;{name = (null), num = 3}
</code></pre>

<p>可以发现，这条线程的num值为3，说明不是主线程，主线程的num为1</p>

<h4>b.静态方法</h4>

<pre><code class="objective-c">    + (void)detachNewThreadSelector:(SEL)selector toTarget:(id)target withObject:(id)argument;
</code></pre>

<pre><code class="objective-c">[NSThread detachNewThreadSelector:@selector(run:) toTarget:self withObject:@"mj"];
</code></pre>

<h4>c.隐式创建线程</h4>

<pre><code class="objective-c">[self performSelectorInBackground:@selector(run:) withObject:@"mj"];
</code></pre>

<p>会隐式地创建一条新线程，并且在这条线程上调用self的run:方法，以@&ldquo;mj"为方法参数</p>

<h3>4.暂停当前线程</h3>

<pre><code class="objective-c">    [NSThread sleepForTimeInterval:2];
</code></pre>

<pre><code class="objective-c">NSDate *date = [NSDate dateWithTimeInterval:2 sinceDate:[NSDate date]];  
[NSThread sleepUntilDate:date];
</code></pre>

<p>上面两种做法都是暂停当前线程2秒</p>

<h3>5.线程的其他操作</h3>

<h4>a.在指定线程上执行操作</h4>

<pre><code class="objective-c"> [self performSelector:@selector(run) onThread:thread withObject:nil waitUntilDone:YES];
</code></pre>

<ul>
<li>上面代码的意思是在thread这条线程上调用self的run方法</li>
<li>最后的YES代表：上面的代码会阻塞，等run方法在thread线程执行完毕后，上面的代码才会通过</li>
</ul>


<h4>b.在主线程上执行操作</h4>

<pre><code class="objective-c">[self performSelectorOnMainThread:@selector(run) withObject:nil waitUntilDone:YES];  
</code></pre>

<p>在主线程调用self的run方法</p>

<h4>c.在当前线程执行操作</h4>

<pre><code class="objective-c">[self performSelector:@selector(run) withObject:nil];
</code></pre>

<p>在当前线程调用self的run方法</p>

<h3>6.优缺点</h3>

<ol>
<li>优点：<code>NSThread</code>比其他多线程方案较轻量级，更直观地控制线程对象</li>
<li>缺点：需要自己管理线程的生命周期，线程同步。线程同步对数据的加锁会有一定的系统开销</li>
</ol>

]]></content>
  </entry>
  
</feed>
